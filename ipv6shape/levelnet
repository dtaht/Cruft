#!/bin/sh

NETWORK1=192.168.176.0
NETWORK2=192.168.22.0
NETWORK3=192.168.23.0
NETWORK4=192.168.177.0

INSIDEIF=eth1
OUTSIDEIF=eth0

# To speed this up, we can use the last part of the IP address as a 'hash key'. We then get 256 tables, the first of which looks like this:

tc filter add dev eth1 parent 1:0 protocol ip prio 100 match ip src \
  $NETWORK1 classid 1:1
tc filter add dev eth1 parent 1:0 protocol ip prio 100 match ip src \
  $NETWORK2 classid 1:2
tc filter add dev eth1 parent 1:0 protocol ip prio 100 match ip src \
  $NETWORK3 classid 1:3
tc filter add dev eth1 parent 1:0 protocol ip prio 100 match ip src \
  $NETWORK4 classid 1:4

The next one starts like this:

tc filter add dev eth1 parent 1:0 prio 5 protocol ip u32
tc filter add dev eth1 parent 1:0 prio 5 handle 2: protocol ip u32 divisor 256

Now we add some rules to entries in the created table:

# tc filter add dev eth1 protocol ip parent 1:0 prio 5 u32 ht 2:7b: \
        match ip src 1.2.0.123 flowid 1:1
# tc filter add dev eth1 protocol ip parent 1:0 prio 5 u32 ht 2:7b: \
        match ip src 1.2.1.123 flowid 1:2
# tc filter add dev eth1 protocol ip parent 1:0 prio 5 u32 ht 2:7b: \
        match ip src 1.2.3.123 flowid 1:3
# tc filter add dev eth1 protocol ip parent 1:0 prio 5 u32 ht 2:7b: \
        match ip src 1.2.4.123 flowid 1:2

This is entry 123, which contains matches for 1.2.0.123, 1.2.1.123, 1.2.2.123, 1.2.3.123, and sends them to 1:1, 1:2, 1:3 and 1:2 respectively. Note that we need to specify our hash bucket in hex, 0x7b is 123.

# Next create a 'hashing filter' that directs traffic to the right entry in the hashing table:

tc filter add dev eth1 protocol ip parent 1:0 prio 5 u32 ht 800:: \
        match ip src $NETWORK/24 \
        hashkey mask 0x000000ff at 12 \
        link 2:
